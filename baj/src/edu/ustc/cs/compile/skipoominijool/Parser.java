/* Generated By:JavaCC: Do not edit this line. Parser.java */
package  edu.ustc.cs.compile.skipoominijool;

import java.io.File;
import java.io.FileReader;
import java.io.FileNotFoundException;
import java.util.List;
import java.util.LinkedList;

import org.eclipse.jdt.core.dom.*;
import edu.ustc.cs.compile.platform.interfaces.ParserInterface;
import edu.ustc.cs.compile.platform.interfaces.ParserException;
import edu.ustc.cs.compile.platform.interfaces.InterRepresent;
import edu.ustc.cs.compile.platform.util.ir.HIR;
import edu.ustc.cs.compile.platform.util.ASTView.core.*;
import edu.ustc.cs.compile.platform.util.ASTView.plugin.*;

public class Parser implements ParserInterface, ParserConstants {
  private boolean success = false;
  private boolean debug = true;
  private int error_num = 0;

  private AST ast = AST.newAST(AST.JLS3);
  private ASTNode root = null;

  public Parser(){
  }

  public ASTNode getAST() {
    if (success) {
      return root;
    }
    return null;
  }

  void setPosition(ASTNode n, Token t){
      n.setProperty("line", t.beginLine);
      n.setProperty("column", t.beginColumn);
  }

  void setPosition(ASTNode a, ASTNode b){
      a.setProperty("line", b.getProperty("line"));
      a.setProperty("column", b.getProperty("column"));
  }

  boolean isKeyword(String s){
      return s.equals("int")
              || s.equals("boolean")
              || s.equals("String")
              || s.equals("final")
              || s.equals("read")
              || s.equals("print")
              || s.equals("if")
              || s.equals("else")
              || s.equals("while")
              || s.equals("break")
              || s.equals("continue")
              || s.equals("void")
              || s.equals("class")
              || s.equals("return")
              || s.equals("true")
              || s.equals("false");
  }

  public InterRepresent doParse(File src) throws ParserException {
        System.out.println("#SkipOOMiniJOOL Parser - by baj@mail.ustc.edu.cn (c) 2008");
    try{
      jj_input_stream = new JavaCharStream(new FileReader(src), 1, 1);
    } catch(Exception e){
      e.printStackTrace();
      throw new ParserException();
    }

    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();

    try {
      root = Program();
    }
    catch (ParseException e) {
      System.err.println("Error " + error_num + ": error in parse routine - details:\n" + e.toString());
      return null;
//      throw new ParserException();
    }
    catch(Error err){
      System.err.println("Error " + error_num + ": unrecognized token - details:\n" + err.toString());
      return null;
//      throw new ParserException();
    }

    if (error_num > 0){
        System.err.println("Fatal: Error in Parser, could not continue for Checker");
        throw new ParserException();
    }
    HIR ir = new HIR();
    ir.setIR(root);

    success = true;
    return ir;
  }

/***************************************************
 * THE SkipOOMiniJOOL LANGUAGE GRAMMAR STARTS HERE *
 ***************************************************/
  final public CompilationUnit Program() throws ParseException {
  CompilationUnit cu;
  TypeDeclaration td;
    cu = ast.newCompilationUnit();
    td = class_declaration();
    jj_consume_token(0);
    setPosition(cu, td);
    success = true;
    cu.types().add(td);
    {if (true) return cu;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration class_declaration() throws ParseException {
  TypeDeclaration td;
  LinkedList classbody;
  Token program;
    td = ast.newTypeDeclaration();
    classbody = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
      jj_consume_token(CLASS);
   setPosition(td, token);
      break;
    default:
      jj_la1[0] = jj_gen;
      error("class spell error");
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROGRAM:
      program = jj_consume_token(PROGRAM);
      break;
    case IDENTIFIER:
      program = jj_consume_token(IDENTIFIER);
                                                  error("class name should be \"Program\"");
      break;
    default:
      jj_la1[1] = jj_gen;
      error("miss class name");
     program = new Token(); program.kind = PROGRAM; program.image = "MISSING";
    }
    classbody = class_body();
        td.setName(ast.newSimpleName(program.image));
        td.bodyDeclarations().addAll(classbody);
        {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList class_body() throws ParseException {
  LinkedList body;
  BodyDeclaration bd;
   body = new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      break;
    default:
      jj_la1[2] = jj_gen;
      error("\"{\" expected in class body declaration");
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case STRING:
      case IF:
      case WHILE:
      case CONTINUE:
      case BREAK:
      case STATIC:
      case FINAL:
      case VOID:
      case RETURN:
      case READ:
      case PRINT:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      bd = class_body_declaration();
     body.add(bd);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_1(2147483647)) {
        error("\"}\" expected in class body declaration");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  final public BodyDeclaration class_body_declaration() throws ParseException {
  FieldDeclaration fd;
  MethodDeclaration md;
    if (jj_2_2(2147483647)) {
      md = method_decalartion();
                             {if (true) return md;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case STRING:
      case IF:
      case WHILE:
      case CONTINUE:
      case BREAK:
      case STATIC:
      case FINAL:
      case VOID:
      case RETURN:
      case READ:
      case PRINT:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case BANG:
      case PLUS:
      case MINUS:
        fd = field_declaration();
                            {if (true) return fd;}
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration field_declaration() throws ParseException {
  FieldDeclaration fd;
  Type pt;
  LinkedList vdfs;
  boolean is_static;
  boolean is_final;
   is_static = false; is_final = false;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
      case FINAL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
                is_static = true;
        break;
      case FINAL:
        jj_consume_token(FINAL);
                                                   is_final = true;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case STRING:
    case VOID:
      pt = type();
      fd = field_variable_declarators();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[8] = jj_gen;
        error("\";\" expected in field declaration");
      }
            if (is_static == true){
                fd.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));
            }
            if (is_final == true){
                fd.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.FINAL_KEYWORD));
            }
            fd.setType(pt);
            {if (true) return fd;}
      break;
    case IF:
    case WHILE:
    case CONTINUE:
    case BREAK:
    case RETURN:
    case READ:
    case PRINT:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case PLUS:
    case MINUS:
      statement();
        error("wrong field declaration");
        VariableDeclarationFragment vdf = ast.newVariableDeclarationFragment();
        fd = ast.newFieldDeclaration(vdf);
        setPosition(fd, token);
        {if (true) return fd;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration field_variable_declarators() throws ParseException {
  FieldDeclaration fd;
  VariableDeclarationFragment vdf;
    vdf = variable_declarator();
     fd = ast.newFieldDeclaration(vdf);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      vdf = variable_declarator();
       fd.fragments().add(vdf);
    }
    setPosition(fd, vdf);
    {if (true) return fd;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationStatement variable_declarators() throws ParseException {
  VariableDeclarationStatement vds;
  VariableDeclarationFragment vdf;
    vdf = variable_declarator();
    vds = ast.newVariableDeclarationStatement(vdf);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      vdf = variable_declarator();
       vds.fragments().add(vdf);
    }
   {if (true) return vds;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationFragment variable_declarator() throws ParseException {
  VariableDeclarationFragment vdf;
  Expression e;
  Token t;
     vdf = ast.newVariableDeclarationFragment();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    default:
      jj_la1[12] = jj_gen;
      error("miss identifer in variable declarator");
      t = getNextToken();
      if (t != null){
          if (t.kind == EOF){
              {if (true) return vdf;}
          }
          setPosition(vdf, token);
          if (isKeyword(t.image)){
              error("keyword \"" + t.image + "\" is misused");
          }
      }
       {if (true) return vdf;}
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      e = variable_initializer();
     vdf.setInitializer(e);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    setPosition(vdf, t);
    vdf.setName(ast.newSimpleName(t.image));
    {if (true) return vdf;}
    throw new Error("Missing return statement in function");
  }

  final public Expression variable_initializer() throws ParseException {
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
      e = expression();
      break;
    case LBRACE:
      e = array_initializer();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializer array_initializer() throws ParseException {
  ArrayInitializer ai;
  Expression e;
   ai = ast.newArrayInitializer();setPosition(ai, token);
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
      e = expression();
     ai.expressions().add(e);
      label_5:
      while (true) {
        if (jj_2_3(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        e = expression();
       ai.expressions().add(e);
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
             error("initialization expression should not end with \",\"");
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
   {if (true) return ai;}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration method_decalartion() throws ParseException {
  MethodDeclaration md;
  Block body;
    md = method_header();
    body = method_body();
    md.setBody(body);
    {if (true) return md;}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration method_header() throws ParseException {
  MethodDeclaration md;
  Type t;
  Token tok;
  LinkedList parameters;
   md = ast.newMethodDeclaration(); setPosition(md, token);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      jj_consume_token(STATIC);
              md.modifiers().add(ast.newModifier(Modifier.ModifierKeyword.STATIC_KEYWORD));
    }
    t = type();
   md.setReturnType2(t);
    tok = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    default:
      jj_la1[18] = jj_gen;
      error("\"(\" expected in method header");
    }
    if (jj_2_4(2147483647)) {
      parameters = formal_parameter_list();
     md.parameters().addAll(parameters);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RPAREN:
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[19] = jj_gen;
      error("\")\" expected in method header");
    }
   setPosition(md, tok); md.setName(ast.newSimpleName(tok.image)); {if (true) return md;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList formal_parameter_list() throws ParseException {
  LinkedList parameters;
  SingleVariableDeclaration svd;
   parameters = new LinkedList();
    svd = formal_parameter();
                              parameters.add(svd);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      svd = formal_parameter();
                                        parameters.add(svd);
    }
   {if (true) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final public SingleVariableDeclaration formal_parameter() throws ParseException {
  SingleVariableDeclaration svd;
  Type t;
  Token tok;
   svd = ast.newSingleVariableDeclaration(); setPosition(svd, token);
    t = type();
    tok = jj_consume_token(IDENTIFIER);
    svd.setType(t);
    svd.setName(ast.newSimpleName(tok.image));
    {if (true) return svd;}
    throw new Error("Missing return statement in function");
  }

  final public Block method_body() throws ParseException {
  Block b;
    b = block();
   {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Block block() throws ParseException {
  Block b;
  LinkedList bss;
    b = ast.newBlock();
    setPosition(b, token);
    bss = new LinkedList();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case STRING:
    case IF:
    case WHILE:
    case CONTINUE:
    case BREAK:
    case VOID:
    case RETURN:
    case READ:
    case PRINT:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case PLUS:
    case MINUS:
      bss = block_statements();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
   b.statements().addAll(bss); {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList block_statements() throws ParseException {
  LinkedList bss;
  Statement s;
   bss = new LinkedList();
    try {
      label_8:
      while (true) {
        s = block_statement();
                               bss.add(s);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case STRING:
        case IF:
        case WHILE:
        case CONTINUE:
        case BREAK:
        case VOID:
        case RETURN:
        case READ:
        case PRINT:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case BANG:
        case PLUS:
        case MINUS:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_8;
        }
      }
    } catch (ParseException e) {
    error_skipto2(SEMICOLON, "error in block statements", e);
    }
   {if (true) return bss;}
    throw new Error("Missing return statement in function");
  }

  final public Statement block_statement() throws ParseException {
  Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case STRING:
    case VOID:
      try {
        s = local_variable_declaration_statement();
      } catch (ParseException e) {
      error_skipto2(SEMICOLON, "error in local variable declaration statement", e);
      {s = ast.newEmptyStatement(); setPosition(s, token); {if (true) return s;}}
      }
      break;
    case IF:
    case WHILE:
    case CONTINUE:
    case BREAK:
    case RETURN:
    case READ:
    case PRINT:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case LBRACE:
    case SEMICOLON:
    case BANG:
    case PLUS:
    case MINUS:
      s = statement();
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationStatement local_variable_declaration_statement() throws ParseException {
  VariableDeclarationStatement vds;
  Type t;
    t = type();
    vds = variable_declarators();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[24] = jj_gen;
      error("\";\" expected in local variable declaration statement");
    }
   vds.setType(t); {if (true) return vds;}
    throw new Error("Missing return statement in function");
  }

  final public Statement statement() throws ParseException {
  Statement s;
  Expression e;
  Statement s2;
  IfStatement i;
  ReturnStatement r;
  LinkedList args;
  MethodInvocation mi;
  ExpressionStatement se;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
                         s = ast.newEmptyStatement(); setPosition(s, token); {if (true) return s;}
        break;
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case PLUS:
      case MINUS:
        s = statement_expression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[25] = jj_gen;
          error("\";\" expected in expression statement");
        }
              {if (true) return s;}
        break;
      case BREAK:
        jj_consume_token(BREAK);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[26] = jj_gen;
          error("\";\" expected in break statement");
        }
             s = ast.newBreakStatement(); setPosition(s, token); {if (true) return s;}
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[27] = jj_gen;
          error("\";\" expected in continue statement");
        }
              s = ast.newContinueStatement(); setPosition(s, token); {if (true) return s;}
        break;
      case RETURN:
        jj_consume_token(RETURN);
                       r = ast.newReturnStatement(); setPosition(r, token);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          e = expression();
                                  r.setExpression(e);
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[29] = jj_gen;
          error("\";\" expected in return statement");
        }
                {if (true) return r;}
        break;
      case LBRACE:
        s = block();
                           {if (true) return s;}
        break;
      case IF:
        jj_consume_token(IF);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        default:
          jj_la1[30] = jj_gen;
          error("\"(\" expected in if condition");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          e = expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RPAREN:
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[31] = jj_gen;
            error("\")\" expected in if condition");
          }
          break;
        default:
          jj_la1[32] = jj_gen;
          error_skipto(RPAREN, "miss/wrong condition in if statement");
                e = ast.newBooleanLiteral(true);
        }
        s2 = statement();
               i = ast.newIfStatement();
               setPosition(i, token);
               i.setExpression(e);
               i.setThenStatement(s2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          s2 = statement();
                                                     i.setElseStatement(s2); s = i;
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
              {if (true) return i;}
        break;
      case WHILE:
        jj_consume_token(WHILE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        default:
          jj_la1[34] = jj_gen;
          error("\"(\" expected in while condition");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case TRUE:
        case FALSE:
        case IDENTIFIER:
        case LPAREN:
        case BANG:
        case PLUS:
        case MINUS:
          e = expression();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RPAREN:
            jj_consume_token(RPAREN);
            break;
          default:
            jj_la1[35] = jj_gen;
            error("\")\" expected in while condition");
          }
          break;
        default:
          jj_la1[36] = jj_gen;
          error_skipto(RPAREN, "miss/wrong condition in while statement");
                e = ast.newBooleanLiteral(true);
        }
        s2 = statement();
                WhileStatement w = ast.newWhileStatement();
                setPosition(w, token);
                w.setExpression(e);
                w.setBody(s2);
                {if (true) return w;}
        break;
      case PRINT:
        jj_consume_token(PRINT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        default:
          jj_la1[37] = jj_gen;
          error("\"(\" expected in print statement");
        }
        args = argument_list();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RPAREN:
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[38] = jj_gen;
          error("\")\" expected in print statement");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[39] = jj_gen;
          error("\";\" expected in print statement");
        }
                 mi = ast.newMethodInvocation();
                 mi.setName(ast.newSimpleName("print"));
                 mi.arguments().addAll(args);
                 if (args.size() > 1){
                     error("print statement can only take ine argument");
                 }
                 setPosition(mi, token);
                 se = ast.newExpressionStatement(mi);
                 {if (true) return se;}
        break;
      case READ:
        jj_consume_token(READ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          break;
        default:
          jj_la1[40] = jj_gen;
          error("\"(\" expected in read statement");
        }
        args = argument_list();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RPAREN:
          jj_consume_token(RPAREN);
          break;
        default:
          jj_la1[41] = jj_gen;
          error("\")\" expected in read statement");
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[42] = jj_gen;
          error("\";\" expected in read statement");
        }
                 mi = ast.newMethodInvocation();
                 mi.setName(ast.newSimpleName("read"));
                 mi.arguments().addAll(args);
                 if (args.size() > 1){
                     error("read statement can only take ine argument");
                 }
                 setPosition(mi, token);
                 se = ast.newExpressionStatement(mi);
                 {if (true) return se;}
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return s;}
    } catch (ParseException pe) {
                error_skipto2(SEMICOLON, "error in statement", pe);
        {s = ast.newEmptyStatement(); {if (true) return s;}}
    }
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement statement_expression() throws ParseException {
  ExpressionStatement se;
  Expression e;
    /*LOOKAHEAD(<IDENTIFIER><LPAREN>) se = method_invocation()
        | LOOKAHEAD(assignment_expression()) se = assignment_statement()
        |*/ e = expression();
                          se = ast.newExpressionStatement(e); setPosition(se, e);
   {if (true) return se;}
    throw new Error("Missing return statement in function");
  }

  final public Expression primary_expression() throws ParseException {
    Expression e;
    if (jj_2_5(2147483647)) {
      e = assignment_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
      case IDENTIFIER:
      case LPAREN:
        e = primary();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression primary() throws ParseException {
  Expression e, e1;
  Token t;
    if (jj_2_6(2147483647)) {
      e = method_invocation_expression();
    } else if (jj_2_7(2147483647)) {
      e = array_access();
    } else if (jj_2_8(2147483647)) {
      e = array_size();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case TRUE:
      case FALSE:
        e = literal();
        break;
      case IDENTIFIER:
        t = name();
          e = ast.newSimpleName(t.image);
          setPosition(e, t);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e1 = expression();
        jj_consume_token(RPAREN);
        ParenthesizedExpression pe = ast.newParenthesizedExpression();
        pe.setExpression(e1);
        e = pe;
        break;
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public MethodInvocation method_invocation_expression() throws ParseException {
  MethodInvocation mi;
  LinkedList args;
  Token t;
   mi = ast.newMethodInvocation(); args = new LinkedList();
    t = name();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
      args = argument_list();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    mi.setName(ast.newSimpleName(t.image));
    mi.arguments().addAll(args);
    setPosition(mi, t);
    {if (true) return mi;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement method_invocation() throws ParseException {
  ExpressionStatement se;
  MethodInvocation mi;
    mi = method_invocation_expression();
    se = ast.newExpressionStatement(mi);
    setPosition(se, mi);
    {if (true) return se;}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList argument_list() throws ParseException {
  LinkedList args;
  Expression e;
   args = new LinkedList();
    e = expression();
                    args.add(e);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      e = expression();
                              args.add(e);
    }
   {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayAccess array_access() throws ParseException {
  ArrayAccess aa;
  Token t;
  Expression e = ast.newNumberLiteral();
   aa = ast.newArrayAccess();
    t = name();
    jj_consume_token(LBRACKET);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
      e = expression();
        setPosition(e, t);
      break;
    default:
      jj_la1[48] = jj_gen;
      error("miss index expression in array access");
          e = ast.newNumberLiteral();
          setPosition(e, t);
    }
    jj_consume_token(RBRACKET);
    aa.setArray(ast.newSimpleName(t.image));
    aa.setIndex(e);
    setPosition(aa, t);
    {if (true) return aa;}
    throw new Error("Missing return statement in function");
  }

  final public QualifiedName array_size() throws ParseException {
    Token id;
    QualifiedName qn;
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    jj_consume_token(LENGTH);
        qn = ast.newQualifiedName(ast.newSimpleName(id.image), ast.newSimpleName("length"));
        setPosition(qn, token);
        {if (true) return qn;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {
  Expression e;
    e = or_expression();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression or_expression() throws ParseException {
  Expression e, e1,e2;
  InfixExpression ie;
    e1 = and_expression();
                         e = e1;
    label_10:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_10;
      }
     e = ie = ast.newInfixExpression(); setPosition(e, token); ie.setLeftOperand(e1);
      jj_consume_token(OR);
      e2 = and_expression();
      ie.setOperator(InfixExpression.Operator.CONDITIONAL_OR);
      ie.setRightOperand(e2);
      e1 = ie;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression and_expression() throws ParseException {
  Expression e, e1,e2;
  InfixExpression ie;
    e1 = compare_expression();
                             e = e1;
    label_11:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_11;
      }
   e = ie = ast.newInfixExpression();  setPosition(e, token);ie.setLeftOperand(e1);
      jj_consume_token(AND);
      e2 = compare_expression();
      ie.setOperator(InfixExpression.Operator.CONDITIONAL_AND);
      ie.setRightOperand(e2);
      e1 = ie;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression compare_expression() throws ParseException {
  Expression e, e1,e2;
  InfixExpression ie;
    e1 = equal_expression();
                           e = e1;
    label_12:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_12;
      }
   e = ie = ast.newInfixExpression();  setPosition(e, token);ie.setLeftOperand(e1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LT:
        jj_consume_token(LT);
            ie.setOperator(InfixExpression.Operator.LESS);
        break;
      case LE:
        jj_consume_token(LE);
              ie.setOperator(InfixExpression.Operator.LESS_EQUALS);
        break;
      case GT:
        jj_consume_token(GT);
              ie.setOperator(InfixExpression.Operator.GREATER);
        break;
      case GE:
        jj_consume_token(GE);
              ie.setOperator(InfixExpression.Operator.GREATER_EQUALS);
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = equal_expression();
      ie.setRightOperand(e2);
      e1 = ie;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression equal_expression() throws ParseException {
  Expression e, e1,e2;
  InfixExpression ie;
    e1 = term_expression();
                          e = e1;
    label_13:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_13;
      }
   e = ie = ast.newInfixExpression(); setPosition(e, token); ie.setLeftOperand(e1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        jj_consume_token(EQ);
            ie.setOperator(InfixExpression.Operator.EQUALS);
        break;
      case NE:
        jj_consume_token(NE);
              ie.setOperator(InfixExpression.Operator.NOT_EQUALS);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = term_expression();
      ie.setRightOperand(e2);
      e1 = ie;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression term_expression() throws ParseException {
  Expression e, e1,e2;
  InfixExpression ie;
    e1 = factor_expression();
                            e = e1;
    label_14:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_14;
      }
   e = ie = ast.newInfixExpression(); setPosition(e, token); ie.setLeftOperand(e1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
              ie.setOperator(InfixExpression.Operator.PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                 ie.setOperator(InfixExpression.Operator.MINUS);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = factor_expression();
      ie.setRightOperand(e2);
      e1 = ie;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression factor_expression() throws ParseException {
  Expression e, e1,e2;
  InfixExpression ie;
    e1 = unary_expression();
                           e = e1;
    label_15:
    while (true) {
      if (jj_2_14(2)) {
        ;
      } else {
        break label_15;
      }
   e = ie = ast.newInfixExpression(); setPosition(e, token); ie.setLeftOperand(e1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
              ie.setOperator(InfixExpression.Operator.TIMES);
        break;
      case SLASH:
        jj_consume_token(SLASH);
                 ie.setOperator(InfixExpression.Operator.DIVIDE);
        break;
      case REM:
        jj_consume_token(REM);
               ie.setOperator(InfixExpression.Operator.REMAINDER);
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      e2 = unary_expression();
      ie.setRightOperand(e2);
      e1 = ie;
    }
    {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression unary_expression() throws ParseException {
  Expression e1;
  PrefixExpression pe;
  boolean prefix;
     prefix = false; pe = ast.newPrefixExpression(); setPosition(pe, token);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
    case PLUS:
    case MINUS:
     prefix = true;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
              pe.setOperator(PrefixExpression.Operator.PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
                 pe.setOperator(PrefixExpression.Operator.MINUS);
        break;
      case BANG:
        jj_consume_token(BANG);
                pe.setOperator(PrefixExpression.Operator.NOT);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
    e1 = primary_expression();
    if (prefix){
      pe.setOperand(e1);
      {if (true) return pe;}
    }
    else {
      {if (true) return e1;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression lvalue() throws ParseException {
  Expression e, e1;
  Token t;
    if (jj_2_15(2147483647)) {
      e = array_access();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = name();
                  e = ast.newSimpleName(t.image); setPosition(e, t);
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        e1 = lvalue();
        jj_consume_token(RPAREN);
      ParenthesizedExpression pe = ast.newParenthesizedExpression();
      setPosition(pe, token);
      pe.setExpression(e1);
      e = pe;
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStatement assignment_statement() throws ParseException {
  ExpressionStatement es;
  Assignment a;
    a = assignment_expression();
    es = ast.newExpressionStatement(a);
    setPosition(es, a);
    {if (true) return es;}
    throw new Error("Missing return statement in function");
  }

  final public Assignment assignment_expression() throws ParseException {
  Assignment a;
  Expression e;
   a = ast.newAssignment();
    e = lvalue();
                  a.setLeftHandSide(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                a.setOperator(Assignment.Operator.ASSIGN); setPosition(a, token);
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
                    a.setOperator(Assignment.Operator.TIMES_ASSIGN ); setPosition(a, token);
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
                     a.setOperator(Assignment.Operator.DIVIDE_ASSIGN); setPosition(a, token);
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
                   a.setOperator(Assignment.Operator.REMAINDER_ASSIGN); setPosition(a, token);
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
                    a.setOperator(Assignment.Operator.PLUS_ASSIGN); setPosition(a, token);
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
                     a.setOperator(Assignment.Operator.MINUS_ASSIGN); setPosition(a, token);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = expression();
                      a.setRightHandSide(e);
   {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Type type() throws ParseException {
  Type t;
  Token tok;
    if (jj_2_16(2147483647)) {
      t = array_type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case VOID:
        t = primitive_type();
        break;
      case STRING:
        t = simple_type();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    setPosition(t, token); {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType primitive_type() throws ParseException {
  PrimitiveType pt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
           pt = ast.newPrimitiveType(PrimitiveType.INT);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                 pt = ast.newPrimitiveType(PrimitiveType.BOOLEAN);
      break;
    case VOID:
      jj_consume_token(VOID);
              pt = ast.newPrimitiveType(PrimitiveType.VOID);
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   setPosition(pt, token); {if (true) return pt;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleType simple_type() throws ParseException {
  SimpleType st;
  Token t;
    t = jj_consume_token(STRING);
                st = ast.newSimpleType(ast.newSimpleName(t.image)); setPosition(st, t);
   {if (true) return st;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayType array_type() throws ParseException {
  ArrayType at;
  Type pt;
  Expression e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case VOID:
      pt = primitive_type();
      break;
    case STRING:
      pt = simple_type();
      break;
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      at = ast.newArrayType(pt);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      break;
    default:
      jj_la1[60] = jj_gen;
      error("\"[\" expected in array type");
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case TRUE:
    case FALSE:
    case IDENTIFIER:
    case LPAREN:
    case BANG:
    case PLUS:
    case MINUS:
      e = constant_expression();
         at.setProperty("exp", e); // used to semantic checker

      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACKET:
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[62] = jj_gen;
      error("\"]\" expected in array type");
    }
   setPosition(at, pt); {if (true) return at;}
    throw new Error("Missing return statement in function");
  }

  final public Expression constant_expression() throws ParseException {
  Expression e;
    e = expression();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Expression literal() throws ParseException {
  Expression e;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
        NumberLiteral nl = ast.newNumberLiteral();
        nl.setToken(t.image);
        e = nl;
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                  e = ast.newBooleanLiteral(true);
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                   e = ast.newBooleanLiteral(false);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
        StringLiteral sl = ast.newStringLiteral();
        sl.setEscapedValue(t.image);
        e = sl;
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   setPosition(e, token); {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Token name() throws ParseException {
  Token t;
    t = jj_consume_token(IDENTIFIER);
   {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  void error_skipto(int kind, String msg) throws ParseException {
                                          //used in Shallow Error Recovery
  ParseException e = generateParseException();
  System.err.println("Error " + error_num + ": " + msg + " at line " + token.beginLine + " column " + token.beginColumn);
  error_num += 1;
  Token t;
  do {
    t = getNextToken();
    if (t.kind == EOF){
      return;
    }
  } while (t.kind != kind);
  }

  void error_skipto2(int kind, String msg, Exception e) throws ParseException {
                                                       //used in Deep Error Recovery
    System.err.print("Error " + error_num + ": " + msg
        + " at line " + token.beginLine + " column " + token.beginColumn);
    System.err.println(" - details:\n" + e.toString());
    error_num += 1;
        Token t;
        do {
                t = getNextToken();
        if (t.kind == EOF){
          return;
        }
        } while (t.kind != SEMICOLON);
  }

  void error_jump(String msg) throws ParseException {
                             //dump error and jump pass a token
  Token t = getNextToken();
  System.err.println("Error " + error_num + ": " + msg + " at line " + t.beginLine + " column " + t.beginColumn);
  error_num += 1;
  }

  void error(String msg) throws ParseException {
                        //used in dump error
  System.err.println("Error " + error_num + ": " + msg + " at line " + token.beginLine + " column " + token.beginColumn);
  error_num += 1;
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_3R_16() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_74()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_94()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  final private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_74()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_75()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) return true;
    }
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_47()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_73()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (true) { jj_la = 0; jj_scanpos = jj_lastpos; return false;}
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  public ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[64];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x2000,0x1000,0x0,0x1ffbc000,0x0,0x1ffbc000,0xc00000,0xc00000,0x0,0x1f3bc000,0x0,0x0,0x0,0x0,0x10000000,0x10000000,0x0,0x400000,0x0,0x0,0x0,0x1f3bc000,0x1f3bc000,0x1f3bc000,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x10000000,0x40000,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x1e3a0000,0x10000000,0x10000000,0x10000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x101c000,0x100c000,0x101c000,0x0,0x10000000,0x0,0x10000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x10,0x200,0x30082297,0x400,0x30082297,0x0,0x0,0x2000,0x30082297,0x4000,0x4000,0x10,0x10000,0x30080297,0x30080097,0x4000,0x0,0x80,0x100,0x4000,0x30082297,0x30082297,0x30082297,0x2000,0x2000,0x2000,0x2000,0x30080097,0x2000,0x80,0x100,0x30080097,0x0,0x80,0x100,0x30080097,0x80,0x100,0x2000,0x80,0x100,0x2000,0x30082297,0x97,0x97,0x30080097,0x4000,0x30080097,0x660000,0x900000,0x30000000,0xc0000000,0x30080000,0x30080000,0x90,0x10000,0x0,0x0,0x0,0x800,0x30080097,0x1000,0x7,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x3e,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[16];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 64; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[70];
    for (int i = 0; i < 70; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 64; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 16; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
